class Solution:
    
    def binary_search(self,lst, s):
        low = 0
        high = len(lst) - 1
        while low <= high:
            mid = (low + high) // 2
            if lst[mid] == s:
                return lst[mid]
            elif lst[mid] > s:
                high = mid - 1
            else:
                low = mid + 1
                
        return 0
        
    
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        if len(nums) == 0 or nums == None:
            return
        TwoSum = []
        n = len(nums)
        nums_sorted = sorted(nums)
        for i in range(n):
            s = target - nums_sorted[i]
            s_num = self.binary_search(nums_sorted[i+1:n], s)
            if s_num != 0:
                TwoSum.append(nums_sorted[i])
                TwoSum.append(s_num)
                  
        return TwoSum