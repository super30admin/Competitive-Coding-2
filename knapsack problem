#time complexity: O(n*w)
#space complexity: O(n)
def knapsack(wt, val, W, n):
  if n == 0 or W == 0: 
        return 0
  if t[n][W] != -1: 
        return t[n][W] 

  if wt[n-1] <= W: 
      t[n][W] = max(val[n-1] + knapsack(wt, val, W-wt[n-1], n-1), knapsack(wt, val, W, n-1)) 
      return t[n][W] 
  elif wt[n-1] > W: 
        t[n][W] = knapsack(wt, val, W, n-1) 
        return t[n][W]
