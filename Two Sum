Skip to content
Search or jump toâ€¦
Pull requests
Issues
Marketplace
Explore
 
@manasvijain07 
manasvijain07
/
DSA-Practice
Public
Code
Issues
Pull requests
Actions
Projects
Wiki
Security
Insights
Settings
DSA-Practice/Two Sum
@manasvijain07
manasvijain07 Update Two Sum
Latest commit 6ae78f4 25 days ago
 History
 1 contributor
88 lines (63 sloc)  2.12 KB


Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order.

 

Example 1:

Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].
Example 2:

Input: nums = [3,2,4], target = 6
Output: [1,2]
Example 3:

Input: nums = [3,3], target = 6
Output: [0,1]
 

Constraints:

2 <= nums.length <= 104
-109 <= nums[i] <= 109
-109 <= target <= 109
Only one valid answer exists.

----------------------------------------------------------

Solution 1 - Brute force - TC - O(n^2) SC - O(1)

 public int[] twoSum(int[] nums, int target) {
        for(int i = 0; i < nums.length; i++)
        {
            for(int j = i + 1; j < nums.length; j++)
            {
                if(nums[i] + nums[j] == target)
                    return new int[]{i, j};
            }
        }
        return new int[]{-1, -1};
    }
    
  -------------------------------------------------
  
  Solution 2 - 2 pass HashMap - TC - O(n) SC - O(n)
  
      public int[] twoSum(int[] nums, int target) {
        HashMap<Integer, Integer> map = new HashMap<>();
        
        for(int i = 0; i < nums.length; i++)
        {
            map.put(nums[i], i);
        }
        
        for(int i = 0; i < nums.length; i++)
        {
            int b = target - nums[i];
            if(map.containsKey(b) && map.get(b) != i)
            {
                return new int[]{i, map.get(b)};
            }
        }
        return new int[]{-1, -1};
    }
  
  ------------------------------------------------------
  
  Solution 3 - One pass Hashmap - TC - O(n) SC - O(n)
  
          HashMap<Integer, Integer> map = new HashMap<>();
        
        for(int i = 0; i < nums.length; i++)
        {
            int b = target - nums[i];
            if(map.containsKey(b))
            {
                return new int[]{i, map.get(b)};
            }
            map.put(nums[i], i);
        }
        return new int[]{-1, -1};
    }
 
    
