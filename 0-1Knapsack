//Timecomplexity      O(N)
//SpaceComplexity     O(n*w)


class Knapsack {
 
    // A utility function that returns
    // maximum of two integers
 
    // Returns the maximum value that can
     
    public  static int knapSack(int W, int wt[], int val[], int n)
    {
            // be put in a knapsack of capacity W
      int[][] dp= new int[n+1][W+1];
      for(int i=0;i<=n;i++){
        for(int j=0;j<=W;j++){
            dp[i][j] = -1;
        }
    }
      return helper(W,wt,val,n-1,dp);
    }
      public static int helper(int W, int wt[], int val[], int n, int[][] dp){
          
        if(n == 0){
            if(wt[n] <= W)return val[0];
            return 0;
        }
        
         if(dp[n][W] != -1)return dp[n][W];
        
        int not_take = 0 + helper(W,wt,val,n-1,dp);
        int take = Integer.MIN_VALUE;
        if(wt[n] <= W){
            take = val[n] + helper(W-wt[n],wt,val,n-1,dp);
        }
      return dp[n][W] = Math.max(take,not_take);
    }
 
    // Driver code
     public static void main(String[] args) {
    
        
        int val[] = new int[] { 60, 100, 120 };
        int wt[] = new int[] { 10, 20, 30 };
        int W = 50;
        int n = val.length;
       // Knapsack knapsack = new Knapsack();
        
        System.out.println(knapSack(W, wt, val, n));
    
    }
   
}
