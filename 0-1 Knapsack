Question - https://www.geeksforgeeks.org/0-1-knapsack-problem-dp-10/

Solution 1 - Exhaustive approach - 
  TC - O(2^n) where n - wt array size
  SC - O(n)
  
/*package whatever //do not write package name here */

import java.io.*;

class GFG {
    public static int knapSack(int W, int[] wt, int[] val,int i, int result)
    {
        // base case 
        if(W == 0 || i >= wt.length)
            return result;
            
        if(wt[i] > W)
        {
            return knapSack(W, wt, val, i + 1, result);
        }
        
        // choose
        int case1 = knapSack(W - wt[i], wt, val, i + 1, result + val[i]);
        
        // not choose
        int case2 = knapSack(W, wt, val, i + 1, result);
        
        return Math.max(case1, case2);
            
        
    }
    
    
	public static void main(String args[])
	{
        int val[] = new int[] { 60, 100, 120 };
        int wt[] = new int[] { 10, 20, 30 };
        int W = 50;
		System.out.println(knapSack(W, wt, val, 0, 0));
	}
}

------------------------------------------------------------------

Solution 2 - DP with Memorization
TC - O(W * n) where W - capacity, n - wt array size
SC - O(W * n)

/*package whatever //do not write package name here */

import java.io.*;

class GFG {
    public static int knapSack(int W, int[] wt, int[] val)
    {
        int[][] dp = new int[wt.length + 1][W + 1];
        
        for(int i = 1; i < dp.length; i++)
        {
            for(int j = 0; j < dp[0].length; j++)
            {
                if(j < wt[i - 1])
                {
                    dp[i][j] = dp[i - 1][j];
                }
                else
                {
                    dp[i][j] = Math.max(dp[i - 1][j], val[i - 1] + dp[i - 1][j - wt[i - 1]]);  
                }
            }
        }
            
        return dp[dp.length - 1][dp[0].length - 1];
    }
    
    
	public static void main(String args[])
	{
        int val[] = new int[] { 20, 30, 10, 50 };
        int wt[] = new int[] { 1, 3, 4, 6 };
        int W = 10;
		System.out.println(knapSack(W, wt, val));
	}
}
