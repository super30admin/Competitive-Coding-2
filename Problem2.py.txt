# Time Complexity : O(n*m), n = number of items, m = capacity
# Space Complexity : O(n*m)
# Did this code successfully run on LeetCode : Yes
# Any problem you faced while coding this : No

def knapsackProblem(items, capacity):

    dp = [[(0,0,[]) for _ in range(capacity+1)] for _ in range(len(items)+1)]

	for i in range(1, len(dp)):
		for j in range(1, len(dp[0])):
			if items[i-1][1] <= j:
				if dp[i-1][j][0] < items[i-1][0] + dp[i-1][j-items[i-1][1]][0]:
					itemsTaken = dp[i-1][j-items[i-1][1]][2][:]
					itemsTaken.append(i-1)
					totWeight = dp[i-1][j-items[i-1][1]][1] + items[i-1][1]
					totVal = items[i-1][0] + dp[i-1][j-items[i-1][1]][0]
					dp[i][j] = (totVal, totWeight, itemsTaken)
				else:
					dp[i][j] = dp[i-1][j]
			else:
				dp[i][j] = dp[i-1][j]

	return [dp[-1][-1][0], dp[-1][-1][2]] # Total Value and the item's indices