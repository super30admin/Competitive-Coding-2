# Tc: O(max_days)
# Sc: O(max_days)
#  where max_day is the last day of travel
# Approach: Dynamic Programming: It calculates the minimum cost for each day, considering three ticket options (1-day pass, 7-day pass, and 30-day pass), and returns the minimum cost for the last day of travel.
class Solution:
    def mincostTickets(self, days: List[int], costs: List[int]) -> int:
        dp =[0] * (days[-1] +1)
        travel_days = set(days)

        for i in range(1, days[-1] + 1):
            if i not in travel_days:
                dp[i] = dp[i-1]
            else:
                dp[i] = min(
                    dp[i-1] + costs[0],
                    dp[max(0,i-7)]+ costs[1],
                    dp[max(0, i-30)] +costs[2]
                )
        return dp[days[-1]]
        
